
from base.base_cfg import BaseCfg
from sklearn.base import BaseEstimator, TransformerMixin
import pandas as pd

logger = BaseCfg.getLogger(__name__)


class SimpleColumnTransformer(TransformerMixin, BaseEstimator):
    """Column Transformer.
    Perform column transform based on a list of column names.

    Parameters
    __________
    transFunctions: list(tuple)
        tuple of (name, function, sourceCol, targetCol)

    """

    def __init__(self, transFunctions: list[tuple]):
        self.transFunctions = []
        self.transFunctionsByName = {}
        for trans in transFunctions:
            if len(trans) == 2:
                self.transFunctions.append((*trans, None, None))
            elif len(trans) == 3:
                self.transFunctions.append((*trans, trans[2]))
            elif len(trans) == 4:
                self.transFunctions.append(trans)
            else:
                raise ValueError('Invalid number of parameters in list(tuple)')
            self.transFunctionsByName[trans[0]] = trans

    def fit(self, X, y=None):
        for name, func, col, targetCol in self.transFunctions:
            if BaseCfg.debug:
                logger.debug(f'fit {name}:{col}')
            if col and (col in X.columns):  # col may not generated by previous transformers
                if getattr(func, 'fit', None) is not None:
                    if col:
                        func.fit(X[col])
                    else:
                        func.fit(X)
                else:
                    pass
        return self

    def transform(self, X):
        for name, func, col, targetCol in self.transFunctions:
            if BaseCfg.debug:
                logger.debug(f'transform {name}:{col}=>{targetCol}')
            if getattr(func, 'transform', None) is not None:
                if col:
                    X.loc[:, targetCol] = func.transform(X[col])
                else:
                    X = func.transform(X)
            else:
                if col:
                    if col in X.columns:
                        result = X.apply(
                            lambda x: func(x, x[col]), axis=1)
                        if isinstance(targetCol, list):
                            result = pd.DataFrame(list(result))
                        X.loc[:, targetCol] = result
                    else:
                        logger.warning('Column {} not found'.format(col))
                else:
                    X = X.apply(lambda x: func(x), axis=1)
                pass
        return X
